.d3-container {
  width: 100%;
  height: 600px;
  overflow: auto;
  background-color: #f9f9f9;
  border-radius: 4px;
  position: relative;
  flex-grow: 1;
}

.svg-container {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden; /* Prevent scrollbars on the SVG container */
}

.no-data {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
  color: var(--cnes-dark-gray);
}

svg {
  max-width: 100%;
  max-height: 100%;
}

:host ::ng-deep .tooltip {
  position: absolute;
  display: none;
  background-color: rgba(255, 255, 255, 0.9);
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 8px 12px;
  font-size: 12px;
  pointer-events: none;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  z-index: 10;
}

/* Connections styling */
.connections {
  pointer-events: none; /* Allow clicking through connections */
}

.connection {
  transition: stroke 0.3s, stroke-opacity 0.3s;
}

/* Define styles for hover states and animations */
.connection.data:hover {
  stroke-opacity: 1;
  stroke-width: 3px;
}

.connection.clock:hover {
  stroke-opacity: 1;
  stroke-width: 3px;
}

.connection.control:hover {
  stroke-opacity: 1;
  stroke-width: 3.5px;
}

/* Connection types - these replace the styling from ConnectionService */
.connection.data {
  stroke: #2196F3; /* Blue for data connections */
  stroke-width: 2px;
  stroke-opacity: 0.8;
}

.connection.clock {
  stroke: #FF9800; /* Orange for clock connections */
  stroke-width: 2px;
  stroke-opacity: 0.8;
  stroke-dasharray: 5, 3; /* Dashed line for clock signals */
}

.connection.control {
  stroke: #9C27B0; /* Purple for control connections */
  stroke-width: 2.5px;
  stroke-opacity: 0.8;
  stroke-dasharray: 2, 2; /* Dotted line for control signals */
}

/* When simulation is running */
.is-running .connection.data {
  stroke-opacity: 0.9;
  animation: pulse-data 2s infinite;
}

.is-running .connection.clock {
  stroke-opacity: 1;
  animation: pulse-clock 1s infinite;
}

/* Pulse animation for connections when running */
@keyframes pulse-data {
  0%, 100% { stroke-opacity: 0.6; }
  50% { stroke-opacity: 1; }
}

@keyframes pulse-clock {
  0%, 100% { stroke-opacity: 0.8; }
  50% { stroke-opacity: 1; }
}

/* Components should be draggable */
.component {
  cursor: grab;
  pointer-events: all;
}

/* Prevent other components from capturing events during active drag */
.component.dragging {
  z-index: 1000; /* Bring to front during drag */
  pointer-events: all !important;
  cursor: grabbing !important;
}

.component:not(.dragging) {
  pointer-events: all;
}

/* While any component is being dragged, ignore pointer events on other components */
body.dragging-active .component:not(.dragging) {
  pointer-events: none;
}

body.dragging-active .component:not(.dragging):not(.selected) {
  opacity: 0.6;
}

/* Selection styling */
.component.selected rect,
.component.selected path {
  stroke: #2196F3;
  stroke-width: 2px;
  stroke-dasharray: 3,3;
}

.component.selected {
  z-index: 10;
}

.selection-rect {
  pointer-events: none;
  z-index: 1000;
}

/* Ensure components have component IDs as attributes */
.component {
  pointer-events: all;
}