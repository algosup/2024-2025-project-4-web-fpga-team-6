.d3-container {
  width: 100%;
  height: 600px;
  overflow: auto;
  background-color: #f9f9f9;
  border-radius: 4px;
  position: relative;
  flex-grow: 1;
}

.svg-container {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden; /* Prevent scrollbars on the SVG container */
}

.no-data {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
  color: var(--cnes-dark-gray);
}

svg {
  max-width: 100%;
  max-height: 100%;
}

:host ::ng-deep .tooltip {
  position: absolute;
  display: none;
  background-color: rgba(255, 255, 255, 0.9);
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 8px 12px;
  font-size: 12px;
  pointer-events: none;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  z-index: 10;
}

/* Connections styling */
.connections {
  pointer-events: none; /* Allow clicking through connections */
}

.connection {
  transition: stroke 0.3s ease, stroke-width 0.3s ease, filter 0.3s ease;
}

.connection.active {
  stroke-opacity: 1 !important;
  filter: drop-shadow(0 0 2px rgba(255, 82, 82, 0.5));
}

/* Define styles for hover states and animations */
.connection.data:hover {
  stroke-opacity: 1;
  stroke-width: 3px;
}

.connection.clock:hover {
  stroke-opacity: 1;
  stroke-width: 3px;
}

.connection.control:hover {
  stroke-opacity: 1;
  stroke-width: 3.5px;
}

/* Connection types - these replace the styling from ConnectionService */
.connection.data {
  stroke: #2196F3; /* Blue for data connections */
  stroke-width: 2px;
  stroke-opacity: 0.8;
}

.connection.clock {
  stroke: #FF9800; /* Orange for clock connections */
  stroke-width: 2px;
  stroke-opacity: 0.8;
  stroke-dasharray: 5, 3; /* Dashed line for clock signals */
}

.connection.control {
  stroke: #9C27B0; /* Purple for control connections */
  stroke-width: 2.5px;
  stroke-opacity: 0.8;
  stroke-dasharray: 2, 2; /* Dotted line for control signals */
}

/* When simulation is running */
.is-running .connection.data {
  stroke-opacity: 0.9;
  animation: pulse-data 2s infinite;
}

.is-running .connection.clock {
  stroke-opacity: 1;
  animation: pulse-clock 1s infinite;
}

/* Pulse animation for connections when running */
@keyframes pulse-data {
  0%, 100% { stroke-opacity: 0.6; }
  50% { stroke-opacity: 1; }
}

@keyframes pulse-clock {
  0%, 100% { stroke-opacity: 0.8; }
  50% { stroke-opacity: 1; }
}

/* Enhanced styles for clock pins */
.pin.clock .clock-pin-symbol,
.pin.clock .clock-pin-center {
  transition: fill 0.15s ease;
}

/* Add animation for active clock connections */
.simulation-running .connection.clock.active {
  animation: pulse-active-clock 0.5s infinite alternate;
  stroke-width: 3px !important;
}

@keyframes pulse-active-clock {
  0% { stroke-opacity: 0.7; }
  100% { stroke-opacity: 1; }
}

/* Add animation for active clock component */
.simulation-running .component[data-component-type="WIRE_INPUT"].active rect {
  animation: pulse-active-component 0.5s infinite alternate;
}

@keyframes pulse-active-component {
  0% { fill-opacity: 0.8; }
  100% { fill-opacity: 1; }
}

/* Components should be draggable */
.component {
  cursor: grab;
  pointer-events: all;
  transition: filter 0.2s ease;
}

/* Prevent other components from capturing events during active drag */
.component.dragging {
  z-index: 1000; /* Bring to front during drag */
  pointer-events: all !important;
  cursor: grabbing !important;
}

/* Selected component highlighting - unified styles */
.component.selected {
  filter: drop-shadow(0 0 5px rgba(33, 150, 243, 0.7)) !important;
  z-index: 10;
}

.component.selected rect, 
.component.selected path,
.component.selected circle {
  stroke: #2196F3;
  stroke-width: 2px;
}

/* Add a highlight border around selected components */
.component.selected::after {
  content: '';
  position: absolute;
  top: -5px;
  left: -5px;
  right: -5px;
  bottom: -5px;
  border: 2px dashed #2196F3;
  border-radius: 4px;
  animation: selection-pulse 2s infinite;
  pointer-events: none;
}

@keyframes selection-pulse {
  0% { opacity: 0.4; }
  50% { opacity: 1; }
  100% { opacity: 0.4; }
}

/* Selection rectangle styling - single definition */
.selection-rect {
  fill: rgba(33, 150, 243, 0.1);
  stroke: #2196F3;
  stroke-dasharray: 4,4;
  pointer-events: none;
  z-index: 1000;
  stroke-dashoffset: 0;
  animation: selection-dash 0.5s linear infinite;
}

@keyframes selection-dash {
  to {
    stroke-dashoffset: -8;
  }
}

/* Dim non-selected components during multi-selection */
body.selecting .component:not(.selected):not(:hover) {
  opacity: 0.7;
}

/* Make currently dragged component more prominent */
.component.dragging {
  z-index: 1000;
}

/* Improved hover effects */
.component:hover:not(.dragging):not(.simulation-running *) {
  filter: brightness(1.1);
}

/* While any component is being dragged, ignore pointer events on other components */
body.dragging-active .component:not(.dragging) {
  pointer-events: none;
}

body.dragging-active .component:not(.dragging):not(.selected) {
  opacity: 0.6;
}

/* Ensure components have component IDs as attributes */
.component {
  pointer-events: all;
}

/* Enhanced selection styles */
.selection-indicator {
  animation: pulse 2s infinite;
  transform-origin: center;
  transform-box: fill-box;
}

@keyframes pulse {
  0% {
    opacity: 0.6;
  }
  50% {
    opacity: 0.9;
  }
  100% {
    opacity: 0.6;
  }
}

/* Add styles for simulation visualization */
.simulation-running .component {
  cursor: default !important;
  pointer-events: none;
}

/* Allow clock component to still have visual feedback */
.simulation-running .component[data-component-type="WIRE_INPUT"] {
  pointer-events: all;
  cursor: pointer !important;
  transition: filter 0.2s;
}

.simulation-running .component[data-component-type="WIRE_INPUT"]:hover {
  filter: brightness(1.2);
}

/* Allow input GPIO components to receive clicks during simulation */
.simulation-running .component[data-component-type="GPIO"],
.simulation-running .component[data-component-type="WIRE_INPUT"]:not([data-component-id*="clock"]):not([data-component-id*="clk"]) {
  pointer-events: all !important;
  cursor: pointer !important;
}

.simulation-running .component[data-component-type="GPIO"]:hover,
.simulation-running .component[data-component-type="WIRE_INPUT"]:not([data-component-id*="clock"]):not([data-component-id*="clk"]):hover {
  filter: brightness(1.2);
}

/* Add pulse animation for active clock */
@keyframes clock-pulse {
  0% { fill-opacity: 0.7; }
  50% { fill-opacity: 1; }
  100% { fill-opacity: 0.7; }
}

.simulation-running .component.active rect {
  animation: clock-pulse 0.5s infinite;
}

/* Component tooltip styling - consolidate styles */
#component-tooltip {
  position: absolute;
  visibility: hidden;
  background-color: white;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 8px 12px;
  font-size: 12px;
  pointer-events: none;
  box-shadow: 0 2px 5px rgba(0,0,0,0.15);
  z-index: 1000;
  transition: opacity 0.2s;
  opacity: 0;
}

#component-tooltip.visible {
  visibility: visible;
  opacity: 1;
}

/* Pin states styling */
.pin.high path,
.pin.high circle,
.pin.high rect {
  fill: var(--active-color, #FF1744) !important;
  filter: drop-shadow(0 0 2px rgba(255, 23, 68, 0.6));
  transition: fill 0.15s ease, filter 0.15s ease;
}

.pin.high text {
  fill: var(--active-text-color, #FF1744) !important;
  font-weight: bold;
}

/* Animation for high state */
@keyframes pulse-high {
  0% { filter: drop-shadow(0 0 2px rgba(255, 23, 68, 0.3)); }
  50% { filter: drop-shadow(0 0 4px rgba(255, 23, 68, 0.7)); }
  100% { filter: drop-shadow(0 0 2px rgba(255, 23, 68, 0.3)); }
}

.simulation-running .pin.high path,
.simulation-running .pin.high circle,
.simulation-running .pin.high rect {
  animation: pulse-high 1s infinite;
}

/* Glowing effect for active pins */
.pin.high path,
.pin.high circle,
.pin.high rect {
  filter: drop-shadow(0 0 2px rgba(255, 82, 82, 0.7));
}

/* Blinking effect for active pins in simulation mode */
@keyframes pin-pulse {
  0% { filter: drop-shadow(0 0 1px rgba(255, 23, 68, 0.7)); }
  50% { filter: drop-shadow(0 0 3px rgba(255, 23, 68, 0.9)); }
  100% { filter: drop-shadow(0 0 1px rgba(255, 23, 68, 0.7)); }
}

.simulation-running .pin.high path,
.simulation-running .pin.high circle,
.simulation-running .pin.high rect {
  animation: pin-pulse 1.5s infinite;
}

/* Signal propagation styles */
.connection {
  transition: stroke 0.3s ease, stroke-width 0.3s ease, filter 0.3s ease;
}

.connection.active {
  stroke-opacity: 1 !important;
  filter: drop-shadow(0 0 2px rgba(255, 82, 82, 0.5));
}

.simulation-running .connection.active {
  animation: pulse-connection 2s infinite;
}

@keyframes pulse-connection {
  0% { filter: drop-shadow(0 0 1px rgba(255, 82, 82, 0.5)); }
  50% { filter: drop-shadow(0 0 3px rgba(255, 82, 82, 0.8)); }
  100% { filter: drop-shadow(0 0 1px rgba(255, 82, 82, 0.5)); }
}

/* Pin style when active */
.pin.high path,
.pin.high circle,
.pin.high rect {
  filter: drop-shadow(0 0 2px rgba(255, 82, 82, 0.7));
}

:root {
  /* Default value will be overridden by JS */
  --signal-propagation-ms-per-ps: 100ms;
}

/* Signal propagation animation */
@keyframes signal-propagation {
  0% { stroke-dashoffset: 100%; }
  100% { stroke-dashoffset: 0%; }
}

.simulation-running .connection.active {
  stroke-dasharray: 4 2;
  animation: signal-propagation var(--animation-duration, 100ms) linear forwards;
}